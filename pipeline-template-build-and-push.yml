parameters:
- name: project 
  type: string
- name: nugetApiKey
  type: string
- name: testProject
  type: string
  default: ''
- name: azureStorageConnectionString
  type: string
  default: ''
- name: azureCommunicationServicesAccessKey
  type: string
  default: ''
- name: azureCommunicationServicesEndpoint
  type: string
  default: ''
- name: azureCommunicationServicesRecipient
  type: string
  default: ''
- name: mailjetPublicApiKey
  type: string
  default: ''
- name: mailjetPrivateApiKey
  type: string
  default: ''

stages:
  - stage: publish
    jobs:
      - job: build_and_push_to_nuget
        variables:
          Adliance_Buddy_Tests__AzureStorageConnectionString: ${{ parameters.azureStorageConnectionString }}
          Adliance_Buddy_Tests__AzureCommunication_Endpoint: ${{ parameters.azureCommunicationServicesEndpoint }}
          Adliance_Buddy_Tests__AzureCommunication_AccessKey: ${{ parameters.azureCommunicationServicesAccessKey }}
          Adliance_Buddy_Tests__AzureCommunication_RecipientAddress: ${{ parameters.azureCommunicationServicesRecipient }}
          Adliance_Buddy_Tests__Mailjet_PublicApiKey: ${{ parameters.mailjetPublicApiKey }}
          Adliance_Buddy_Tests__Mailjet_PrivateApiKey: ${{ parameters.mailjetPrivateApiKey }}
        pool:
          vmImage: 'ubuntu-latest'
          
        steps:
          - task: UseDotNet@2
            displayName: "Install .NET"
            inputs:
              version: '8.0.x'
              packageType: sdk
                       
          - script: |
              dotnet tool install -g dotnet-setversion
              dotnet tool update -g dotnet-setversion
              setversion $(Build.BuildNumber) ${{ parameters.project }}
            displayName: 'Run Set-Version'

          - task: DotNetCoreCLI@2
            displayName: 'Build ${{ parameters.project }}'
            inputs:
              projects: '${{ parameters.project }}'
              arguments: '--configuration Release'

          - task: DotNetCoreCLI@2
            displayName: 'Lint ${{ parameters.project }}'
            inputs:
              command: custom
              projects: '${{ parameters.project }}'
              custom: format
              arguments: '-v diag --verify-no-changes'
                                      
          - ${{ if ne(parameters.testProject, '') }}:
            - task: DotNetCoreCLI@2
              displayName: 'Test ${{ parameters.testProject }}'
              inputs:
                command: test
                projects: '${{ parameters.testProject }}'
                arguments: '--configuration Release'
                                   
          - task: DotNetCoreCLI@2
            displayName: 'Pack ${{ parameters.project }}'
            inputs:
              command: pack
              packagesToPack: '${{ parameters.project }}'
              versioningScheme: byBuildNumber
              configuration: 'Release'
              includeSymbols: false
              outputDir: '$(Build.ArtifactStagingDirectory)'
              
          - task: DotNetCoreCLI@2
            displayName: 'Push ${{ parameters.project }}'
            inputs:
              command: 'custom'
              custom: 'nuget'
              arguments: >
                push "$(Build.ArtifactStagingDirectory)/*.nupkg"
                --source "https://api.nuget.org/v3/index.json"
                --api-key "${{ parameters.nugetApiKey }}"
